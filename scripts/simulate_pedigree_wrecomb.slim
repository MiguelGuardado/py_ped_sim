//Recent Update: 10/23/2021
//@author: Miguel Guardado Miguel.Guardado@ucsf.edu



function(i)readIntTable(s$ path)
{
	l=readFile(path);
	return(t(sapply(l, "asInteger(strsplit(applyValue));", simplify="matrix")));
}

initialize() {
	initializeSLiMModelType("nonWF");
	//initializeSLiMOptions(nucleotideBased=T);
	initializeSLiMOptions(keepPedigrees=T);
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	initializeGenomicElement(g1, 0, genome_length);
	
	initializeMutationRate(mu_rate);

	// THIS CODE IS USED TO READ THE RECOMBINATION MAP
 	map = readCSV(recomb_map, c("ends", "rates"), sep=" ");
    ends = map.getValue("ends");
    //(ends);
    ends = c(ends[1:(size(ends)-1)]-2, genome_length);
    rates = map.getValue("rates") * 1e-8;
    initializeRecombinationRate(rates, ends);
	
	suppressWarnings(T);	
	
	//Reads in the pedigree file made from python script, must change per simulation
	defineConstant("ped_matrix", readIntTable(pedigree_filepath));
	//Reads in the pedigree file made from python script
	defineConstant("founder_list", readIntTable(founder_filepath));
	// extract the generations for each offspring for quick lookup
	defineConstant("gen_list", drop(ped_matrix[,0]));

}
//the reproduction function spawns the new individuals from each current generation. 
reproduction(p1) {

	// generate all offspring for the current generation

	cur_gen = ped_matrix[gen_list == community.tick,];

    single_parent_count = 1;
	for (index in seqLen(nrow(cur_gen))) {
		//this gets the index of the row we are looking at for the current generation
		row = cur_gen[index,];
		//print(row);

		if(row[,2]==0)
		{
	    // print('Only single parent known');
		parent1 = p1.subsetIndividuals(tag=row[,1]);//lets the 1st row become parent1
		parent2 = p2.subsetIndividuals(tag=single_parent_count);

        //print(parent1);
        //print(parent2);
        child = subpop.addCrossed(parent1, parent2);//creates the child from parent1 and parent2
        child.tag = row[,3]; //assigns the child.tag to the number made from the pedigree
        single_parent_count = single_parent_count + 1;

		}
		else
		{
		// print('Both parent known');
		parent1 = subpop.subsetIndividuals(tag=row[,1]);//lets the 1st row become parent1
		parent2 = subpop.subsetIndividuals(tag=row[,2]);//lets the 2nd row become parent2

		//print(parent1);
		//print(parent2);

		child = subpop.addCrossed(parent1[0], parent2[0]);  //creates the child from parent1 and parent
		child.tag = row[,3];//assigns the child.tag to the number made from the pedigree
		}

	}
	self.active = 0;
}

reproduction(p2){
	

}

1 early() {

	sim.addSubpop("p1",length(founder_list)-1);
	p1.individuals.tag = founder_list[0:(length(founder_list)-2)];
	p1.genomes.readFromVCF(exp_founder_vcf_filepath, m1);

	// provide initial tags matching the original model, must be the same number inside the function addSubpop()
	
	if(founder_list[length(founder_list)-1]>0){
	    sim.addSubpop("p2",founder_list[(length(founder_list)-1)]);
	    p2.individuals.tag = 1:length(p2.individuals);
	    p2.genomes.readFromVCF(imp_founder_vcf_filepath, m1);//Reads vcf files from founder burn in from "BurnInPedigree"
	}


}
2:10000000 late(){
	last_index=length(ped_matrix[,1])-1;

	if(community.tick == ped_matrix[last_index, 0]){

   	    i_sample = sortBy(p1.individuals, "tag");    // Sorts the individuals based on their given tag
		i_sample.genomes.outputVCF(filePath=output_filename);   // outputs the pedigree, must change per different simulation
		sim.simulationFinished();
	}
	
}